<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="-1" name="BC_ERROR"/>
<constant value="0" name="BC_UNINIT"/>
<constant value="1" name="BC_LEFT"/>
<constant value="2" name="BC_RIGHT"/>
<constant value="3" name="BC_DEAD"/>
<constant value="2000" name="SPEED"/>
<constant value="4000" name="BARCODE_READ_COLOR_THRESHOLD"/>
<constant value="2000" name="BARCODE_READ_DISTANCE"/>
<constant value="0" name="PS_STOPPED"/>
<constant value="1" name="PS_LOOK_AND_SCAN"/>
<constant value="2" name="PS_ALIGN_BACK_UP"/>
<constant value="3" name="PS_ALIGN_BARCODE"/>
<constant value="4" name="PS_ALIGN_BARCODE_RIGHT"/>
<constant value="5" name="PS_ALIGN_BARCODE_SCAN"/>
<constant value="6" name="PS_TURN"/>
<constant value="295" name="ONE_FULL_TURN_TIME"/>
<constant value="300" name="TAPE_THRESHOLD"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">#VARIABLES

var barcode_list[3] = [BC_UNINIT, BC_UNINIT, BC_UNINIT] # Values of the barcodes that have been read
var lights[] = [0, 0, 0] # Array representing the state of the lights
var barcode_number = 0
var program_state = PS_STOPPED

var tmp_color[] = [0, 0, 0] # Temporary variable for reading the color into

# Initializes timer values
var timer_0 = 0
var timer_target = 0
timer.period[0] = 1

callsub stop

onevent timer0
	timer_0 += 1

onevent button.forward
	timer_0 = 0
	program_state = PS_LOOK_AND_SCAN

#Stop the program
onevent button.backward
	callsub stop

# Directional functions
sub forward
	motor.left.target = SPEED
	motor.right.target = SPEED
	timer.period[0] = 1

sub stop
	motor.left.target = 0
	motor.right.target = 0
	program_state = PS_STOPPED
	timer.period[0] = 0

onevent tap
	if program_state == PS_LOOK_AND_SCAN then
		program_state = PS_ALIGN_BACK_UP
		timer_0 = 0
		motor.left.target = -SPEED
		motor.right.target = -SPEED
	end

# Main logic loop
onevent prox

	# If we are looking for the barcode
	if program_state == PS_LOOK_AND_SCAN then
		callsub forward
		if prox.horizontal[2] > BARCODE_READ_DISTANCE then
			program_state = PS_ALIGN_BARCODE
			motor.left.target = -SPEED
			motor.right.target = SPEED
		end

	elseif program_state == PS_ALIGN_BACK_UP then
		if timer_0 > 15 then
			program_state = PS_ALIGN_BARCODE
			motor.left.target = -SPEED
			motor.right.target = SPEED
		end

	# Goes to left of tape
	elseif program_state == PS_ALIGN_BARCODE then

		if prox.ground.delta[0] &lt; TAPE_THRESHOLD then
			motor.left.target = -SPEED
			motor.right.target = SPEED
		else
			program_state = PS_ALIGN_BARCODE_RIGHT
			motor.left.target = SPEED
			motor.right.target = -SPEED
			timer_0 = 0
		end

	# Goes to right of tape (and times it)
	elseif program_state == PS_ALIGN_BARCODE_RIGHT then
		if prox.ground.delta[1] > TAPE_THRESHOLD then
			timer_target = timer_0 / 2
			timer_0 = 0
			motor.left.target = -SPEED
			motor.right.target = SPEED
			program_state = PS_ALIGN_BARCODE_SCAN
		end

	# Goes half way back
	elseif program_state == PS_ALIGN_BARCODE_SCAN then
		# Checks if the timer expired (the timer for probably being in the middle)
		# 50 is a constant just for consistency
		if timer_0 > timer_target - 50 then
			# Here is where we read the barcode

			# Sets tmp_color to the barcode currently being read
			if prox.horizontal[1] > BARCODE_READ_COLOR_THRESHOLD then
				tmp_color[0] = 1
			else
				tmp_color[0] = 0
			end

			if prox.horizontal[2] > BARCODE_READ_COLOR_THRESHOLD then
				tmp_color[1] = 1
			else
				tmp_color[1] = 0
			end

			if prox.horizontal[3] > BARCODE_READ_COLOR_THRESHOLD then
				tmp_color[2] = 1
			else
				tmp_color[2] = 0
			end

			# Decodes the barcode
			if tmp_color[0] == 1 and tmp_color[1] == 0 and tmp_color[2] == 0 then
				barcode_list[barcode_number] = BC_LEFT
			elseif tmp_color[0] == 0 and tmp_color[1] == 0 and tmp_color[2] == 1 then
				barcode_list[barcode_number] = BC_RIGHT
			elseif tmp_color[0] == 1 and tmp_color[1] == 0 and tmp_color[2] == 1 then
				barcode_list[barcode_number] = BC_DEAD
			else
				barcode_list[barcode_number] = BC_ERROR
			end

			if barcode_list[barcode_number] == BC_ERROR then
				callsub stop
			end

			# Updates the barcode number (if we aren't at a dead end)
			if barcode_list[barcode_number] != BC_DEAD then
				barcode_number += 1
			end

			program_state = PS_TURN
			timer_0 = 0
		end
	elseif program_state == PS_TURN then
		# Checks the previous barcode value
		if barcode_list[barcode_number - 1] == BC_LEFT then
			motor.left.target = -SPEED
			motor.right.target = SPEED
		elseif barcode_list[barcode_number - 1] == BC_RIGHT then
			motor.left.target = SPEED
			motor.right.target = -SPEED
		else
			# If this gets called, we done f---ed up
			callsub stop
		end

		if timer_0 > ONE_FULL_TURN_TIME then
			program_state = PS_LOOK_AND_SCAN
		end
	end

</node>


</network>
