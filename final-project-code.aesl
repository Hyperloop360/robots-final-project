<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="FORWARD"/>
<constant value="2" name="FOLLOWLINE"/>
<constant value="3" name="LOST"/>
<constant value="4" name="LEFT"/>
<constant value="5" name="RIGHT"/>
<constant value="3800" name="SCANTHRESH"/>
<constant value="1" name="BC_LEFT"/>
<constant value="2" name="BC_RIGHT"/>
<constant value="3" name="BC_DEAD"/>
<constant value="0" name="BC_UNINIT"/>
<constant value="300" name="SPEED"/>
<constant value="450" name="LINEFOLLOW"/>
<constant value="1" name="BC_RED"/>
<constant value="2" name="BC_GREEN"/>
<constant value="3" name="BC_BLUE"/>
<constant value="1500" name="TRN_PERIOD"/>
<constant value="2000" name="BCK_PERIOD"/>
<constant value="6" name="HIT"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">#VARIABLES
var ArrayList[3] = [BC_UNINIT, BC_UNINIT, BC_UNINIT]
var ScanArray[3] = [0,0,0]
var hitArray1[3]
var lights[] = [0, 0, 0] # possibility of light on or off
var i
var scanCounter = 0
var on = 32
var off = 0
var BCstate = BC_UNINIT
var BCcolor = BC_UNINIT
var state = FORWARD
var hitCount = 0
onevent button.forward
	callsub straight
onevent tap
	hitCount++
	state = HIT
	timer.period[0] = BCK_PERIOD


#Stop the program
onevent button.backward
	motor.left.target = 0
	motor.right.target = 0
	timer.period[0] = 0
	i = 0

#Go Straight
sub straight
	state = FORWARD
	motor.left.target = SPEED
	motor.right.target = SPEED

#Reads barcode and stores in arrays
sub readBarcode
state = STOPPED
motor.left.target = 0
motor.right.target = 0
onevent prox
	# Determine if the block in front is white or black based on reflected THRESHOLD
	for i in 1:3 do
		if prox.horizontal[i] > SCANTHRESH then
			lights[i-1] = 32
		else
			lights[i-1] = 0
		end
	end

	ScanArray = [lights[1],lights[2],lights[0]]

	callsub decodeBarcode
	#make if statements to make the possible results into a variable
	#Display Leds based on values and answers from for loop
	#call leds.circle(lights[1], lights[2], 0, 0, 0, 0, 0, lights[0])
#Decode the meaning and shine lights
sub decodeBarcode
#If hits first or second block
if  hitCount == 1 or hitCount == 2 then
	if  ScanArray[0] == 0 and ScanArray[1] == 32 and ScanArray[2] == 0 then
			BCstate = BC_RIGHT
		end

	if  ScanArray[0] == 0 and ScanArray[1] == 0 and ScanArray[2] == 32 then
			BCstate = BC_LEFT
		end

end
if  hitCount == 3 then
	if  ScanArray[0] == 0 and ScanArray[1] == 32 and ScanArray[2] == 0 then
			BCstate = BC_RED
		end

	if  ScanArray[0] == 0 and ScanArray[1] == 0 and ScanArray[2] == 32 then
			BCstate = BC_GREEN
		end

	if ScanArray[0] == 32 and ScanArray[1] == 0 and ScanArray[2] == 0 then
			BCstate = BC_BLUE
	end
end

	callsub HIT

sub HIT
	if  hitCount == 1 then
		callsub Hit1
	end

	if hitCount == 2 then
		callsub Hit2

	end

	if  hitCount == 3 then
		callsub Hit3

	end



sub Hit1
	ArrayList[0] = BCstate
	if  ArrayList[0] == BC_RIGHT then
		state = RIGHT
		timer.period[0] = TRN_PERIOD
		#Turn right and then straight until it hits
	end

	if  ArrayList[0] == BC_LEFT then
		state = LEFT
		timer.period[0] = TRN_PERIOD
		#Turn left and then straight until it hits
	end


sub Hit2
	ArrayList[1] = BCstate
	if  ArrayList[0] == BC_RIGHT then
		state = LEFT
		timer.period[0] = TRN_PERIOD
		#Turn left and then straight until hits
	end

	if  ArrayList[0] == BC_LEFT then
		state = RIGHT
		timer.period[0] = TRN_PERIOD
		#Turn right and then straight until hits
	end


sub Hit3
	ArrayList[2] = BCstate
	if  ArrayList[0] == BC_RIGHT then
		state = LEFT
		timer.period[0] = TRN_PERIOD
		#Turn left and then straight until hits
	end

	if  ArrayList[0] == BC_LEFT then
		state = RIGHT
		timer.period[0] = TRN_PERIOD
		#Turn right and then straight until hits
	end
onevent timer0
	if  state == RIGHT then
		motor.left.target = SPEED
		motor.right.target = -SPEED
		timer.period[0] = 0
		callsub straight
	end
	if  state == LEFT then
		motor.left.target = -SPEED
		motor.right.target = SPEED
		timer.period[0] = 0
		callsub straight
	end
	if  state == HIT then
		motor.left.target = -SPEED
		motor.right.target = -SPEED
		callsub readBarcode
	end
#Go Left
sub left
	state = LEFT
	motor.left.target = 0
	motor.right.target = SPEED
#Go Right
sub right
	state = RIGHT
	motor.left.target = SPEED
	motor.right.target = 0
#Go into LineFollow
sub linef
# if movint straight and sensing black line
if state == LEFT and prox.ground.delta[0] &lt; LINEFOLLOW then
	motor.left.target = SPEED/2
	motor.right.target = 0
	state = RIGHT
end
# if moving right and sensing black line
if state == RIGHT and prox.ground.delta[0] &lt; LINEFOLLOW then
	motor.left.target = 0
	motor.right.target = SPEED/2
	state = LEFT
end
</node>


</network>
