<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant name="BC_ERROR" value="-1"/>
<constant name="BC_UNINIT" value="0"/>
<constant name="BC_LEFT" value="1"/>
<constant name="BC_RIGHT" value="2"/>
<constant name="BC_DEAD" value="3"/>
<constant name="BC_BLACK_WHITE_BLACK" value="4"/>
<constant name="SPEED" value="200"/>
<constant name="BARCODE_READ_COLOR_THRESHOLD" value="4000"/>
<constant name="BARCODE_READ_DISTANCE" value="2500"/>
<constant name="PS_STOPPED" value="0"/>
<constant name="PS_LOOK_AND_SCAN" value="1"/>
<constant name="PS_ALIGN_BACK_UP" value="2"/>
<constant name="PS_ALIGN_BARCODE" value="3"/>
<constant name="PS_ALIGN_BARCODE_RIGHT" value="4"/>
<constant name="PS_ALIGN_BARCODE_SCAN" value="5"/>
<constant name="PS_TURN" value="6"/>
<constant name="ONE_FULL_TURN_TIME" value="295"/>
<constant name="TAPE_THRESHOLD" value="300"/>
<constant name="PS_LINE_FOLLOW" value="200"/>
<constant name="PS_LINEFOLLOW_LEFT" value="201"/>
<constant name="PS_LINEFOLLOW_RIGHT" value="202"/>
<constant name="PS_CROSS_LINES" value="301"/>
<constant name="PS_SHOW_COLORS" value="302"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node name="thymio-II" nodeId="1">#VARIABLES

var barcode_list[3] = [BC_UNINIT, BC_UNINIT, BC_UNINIT] # Values of the barcodes that have been read
var lights[] = [0, 0, 0] # Array representing the state of the lights
var barcode_number = 0
var program_state = PS_STOPPED

var cross_line_count = 0 # Value for counting the lines that we crossed

var tmp_color[] = [0, 0, 0] # Temporary variable for reading the color into

# Initializes timer values
var timer_0 = 0
var timer_target = 0
timer.period[0] = 1

callsub stop

onevent timer0
    timer_0 += 1

onevent button.forward
    timer_0 = 0
    
    program_state = PS_LOOK_AND_SCAN
    callsub forward

# Stop the program
onevent button.backward
    callsub stop

# Directional functions
sub forward
    motor.left.target = SPEED
    motor.right.target = SPEED
    timer.period[0] = 1

sub stop
    motor.left.target = 0
    motor.right.target = 0
    program_state = PS_STOPPED
    timer.period[0] = 0

onevent tap
    if program_state == PS_LOOK_AND_SCAN then
        program_state = PS_ALIGN_BACK_UP
        timer_0 = 0
        motor.left.target = -SPEED
        motor.right.target = -SPEED
    end

# Main logic loop
onevent prox

    # If we are looking for the barcode
    if program_state == PS_LOOK_AND_SCAN then
        callsub forward
        if prox.horizontal[2] > BARCODE_READ_DISTANCE then
            program_state = PS_ALIGN_BARCODE
            motor.left.target = -SPEED
            motor.right.target = SPEED
        end

    elseif program_state == PS_ALIGN_BACK_UP then
        if timer_0 > 15 then
            program_state = PS_ALIGN_BARCODE
            motor.left.target = -SPEED
            motor.right.target = SPEED
        end

    # Goes to left of tape
    elseif program_state == PS_ALIGN_BARCODE then

        if prox.ground.delta[0] &lt; TAPE_THRESHOLD then
            motor.left.target = -SPEED
            motor.right.target = SPEED
        else
            program_state = PS_ALIGN_BARCODE_RIGHT
            motor.left.target = SPEED
            motor.right.target = -SPEED
            timer_0 = 0
        end

    # Goes to right of tape (and times it)
    elseif program_state == PS_ALIGN_BARCODE_RIGHT then
        if prox.ground.delta[1] > TAPE_THRESHOLD then
            timer_target = timer_0 / 2
            timer_0 = 0
            motor.left.target = -SPEED
            motor.right.target = SPEED
            program_state = PS_ALIGN_BARCODE_SCAN
        end

    # Goes half way back
    elseif program_state == PS_ALIGN_BARCODE_SCAN then
        # Checks if the timer expired (the timer for probably being in the middle)
        # 50 is a constant just for consistency
        if timer_0 > timer_target - 50 then
            # Here is where we read the barcode

            # Sets tmp_color to the barcode currently being read
            if prox.horizontal[1] > BARCODE_READ_COLOR_THRESHOLD then
                tmp_color[0] = 1
            else
                tmp_color[0] = 0
            end

            if prox.horizontal[2] > BARCODE_READ_COLOR_THRESHOLD then
                tmp_color[1] = 1
            else
                tmp_color[1] = 0
            end

            if prox.horizontal[3] > BARCODE_READ_COLOR_THRESHOLD then
                tmp_color[2] = 1
            else
                tmp_color[2] = 0
            end

            # Decodes the barcode
            if tmp_color[0] == 1 and tmp_color[1] == 0 and tmp_color[2] == 0 then
                barcode_list[barcode_number] = BC_LEFT
            elseif tmp_color[0] == 0 and tmp_color[1] == 0 and tmp_color[2] == 1 then
                barcode_list[barcode_number] = BC_RIGHT
            elseif tmp_color[0] == 1 and tmp_color[1] == 0 and tmp_color[2] == 1 then
                barcode_list[barcode_number] = BC_DEAD
            elseif tmp_color[0] == 0 and tmp_color[1] == 1 and tmp_color[2] == 0 then
                barcode_list[barcode_number] = BC_BLACK_WHITE_BLACK
            else
                barcode_list[barcode_number] = BC_ERROR
            end

            if barcode_list[barcode_number] == BC_ERROR then
                callsub stop
            end

            # Updates the barcode number (if we aren't at a dead end)
            if barcode_list[barcode_number] != BC_DEAD then
                barcode_number += 1
            end

            program_state = PS_TURN
            timer_0 = 0

        end

    elseif program_state == PS_TURN then
        # Checks the previous barcode value
        if barcode_list[barcode_number - 1] == BC_LEFT then
            motor.left.target = -SPEED
            motor.right.target = SPEED
        elseif barcode_list[barcode_number - 1] == BC_RIGHT then
            motor.left.target = SPEED
            motor.right.target = -SPEED
        else
            # If this gets called, we done f---ed up
            callsub stop
        end

        if timer_0 > ONE_FULL_TURN_TIME then
            program_state = PS_LOOK_AND_SCAN
        end

    elseif program_state == PS_CROSS_LINES then

        # Basically if cross_line_count is odd, we are on the tape
        # If it is even, then we are off the tape.
        # This way everything can be done without extra variables and can be handled in a simple way.

        if cross_line_count % 2 == 0 and prox.ground.delta[0] &lt; TAPE_THRESHOLD then
            cross_line_count += 1
        elseif cross_line_count % 2 == 1 and prox.ground.delta[0] > TAPE_THRESHOLD then
            cross_line_count += 1
        end

        if cross_line_count >= 6 then
            program_state = PS_SHOW_COLORS

            timer_0 = 0
            motor.left.target = 0
            motor.right.target = 0
        end

    elseif program_state == PS_SHOW_COLORS then

        # Stops after 5s
        if timer_0 > 5000 then
            callsub stop
        end

        if barcode_list[2] == BC_LEFT then
            call leds.top(32, 0, 0)
        elseif barcode_list[2] == BC_RIGHT then
            call leds.top(0, 32, 0)
        elseif barcode_list[2] == BC_BLACK_WHITE_BLACK then
            call leds.top(0, 0, 32)
        else
            call leds.top(32, 32, 32)
        end

    elseif program_state == PS_CROSS_LINES then

        # Basically if cross_line_count is odd, we are on the tape
        # If it is even, then we are off the tape.
        # This way everything can be done without extra variables and can be handled in a simple way.

        if cross_line_count % 2 == 0 and prox.ground.delta[0] &lt; TAPE_THRESHOLD then
            cross_line_count += 1
        elseif cross_line_count % 2 == 1 and prox.ground.delta[0] > TAPE_THRESHOLD then
            cross_line_count += 1
        end

        if cross_line_count >= 6 then
        program_state = PS_SHOW_COLORS

            timer_0 = 0
            motor.left.target = 0
            motor.right.target = 0
        end

    elseif program_state == PS_SHOW_COLORS then

        # Stops after 5s
        if timer_0 > 5000 then
            callsub stop
        end

        if barcode_list[2] == BC_LEFT then
            call leds.top(32, 0, 0)
        elseif barcode_list[2] == BC_RIGHT then
            call leds.top(0, 32, 0)
        elseif barcode_list[2] == BC_BLACK_WHITE_BLACK then
            call leds.top(0, 0, 32)
        else
            call leds.top(32, 32, 32)
        end

    elseif program_state == PS_LINEFOLLOW_LEFT and  prox.ground.delta[0] >= TAPE_THRESHOLD then
        program_state = PS_LINEFOLLOW_RIGHT                         
        motor.left.target = SPEED            
        motor.right.target = 0
        if prox.horizontal[2] > BARCODE_READ_DISTANCE then
            program_state = PS_ALIGN_BARCODE
            motor.left.target = -SPEED
            motor.right.target = SPEED
        end

    elseif program_state == PS_LINEFOLLOW_RIGHT and prox.ground.delta[0] &lt; TAPE_THRESHOLD then
        program_state = PS_LINEFOLLOW_LEFT                        
        motor.left.target = 0                  
        motor.right.target = SPEED
        if prox.horizontal[2] > BARCODE_READ_DISTANCE then
            program_state = PS_ALIGN_BARCODE
            motor.left.target = -SPEED
            motor.right.target = SPEED
        end
    end 
</node>


</network>
